#!/usr/bin/env python3

import curses
import re
import socket
import threading
import time


def ip_and_port(text):
    pattern = r'^(?:\d{1,3}\.){3}\d{1,3}:\d+$'
    return re.match(pattern, text)


class SocketManager:
    def __init__(self, ot) -> None:
        self.condition = threading.Condition()
        self.sockets = {}
        self.set = False
        self.socketAF = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.Out = ot
        self.thread = threading.Thread(target=self.listen)

    def connect(self):
        try:
            self.socketAF.connect((self.sockets["ip"], int(self.sockets["port"])))
            self.set = True
            self.Out.refresh_query(f"Connected to {self.sockets['ip']} on port {self.sockets['port']}")
            self.thread.start()
        except Exception as e:
            self.Out.refresh_query(f"Could not connect to {self.sockets['ip']} on port {self.sockets['port']}")
            self.Out.refresh_query(str(e))
            self.set = False
            self.sockets = {}

    def send(self, data):
        try:
            self.socketAF.send(data.encode())
            time.sleep(0.1)
            self.condition.notify()
        except Exception as e:
            self.Out.refresh_query(f"Could not send data to {self.sockets['ip']} on port {self.sockets['port']}")
            self.Out.refresh_query(str(e))
            self.set = False
            self.sockets = {}
            return

    def listen(self):
        while self.set:
            self.condition.wait()
            try:
                data = self.socketAF.recv(1024)
                if data:
                    self.Out.refresh_query(f"Server: {data.decode()}")
            except Exception as e:
                self.Out.refresh_query(f"Error while listening to {self.sockets['ip']} on port {self.sockets['port']}")
                self.Out.refresh_query(str(e))
                self.set = False
                self.sockets = {}
                return


class OutWin:
    def __init__(self, stdscr) -> None:
        height, width = stdscr.getmaxyx()
        self.text_win = curses.newwin(height - 1, width, 0, 0)
        self.text_win.scrollok(True)
        self.text_win.idlok(True)
        self.com = SocketManager(self)

    def refresh_query(self, query):
        if not self.com.set and ip_and_port(query):
            self.com.sockets["ip"] = query.split(":")[0]
            self.com.sockets["port"] = query.split(":")[1]
            self.com.set = True
            self.text_win.addstr(f"Set IP to {self.com.sockets['ip']} and port to {self.com.sockets['port']}\n")
            self.text_win.refresh()
            return
        if not self.com.set and query.isdigit():
            self.com.sockets["ip"] = "127.0.0.1"
            self.com.sockets["port"] = query
            self.com.set = True
            self.text_win.addstr(f"Set IP to {self.com.sockets['ip']} and port to {self.com.sockets['port']}\n")
            self.text_win.refresh()
            return
        if not self.com.set:
            self.text_win.addstr("Please input a port number in the text box below.\n")
            self.text_win.refresh()
            return
        if query == "connect":
            self.com.connect()
            return
        self.text_win.addstr(query + "\n")
        self.text_win.refresh()
        self.com.send(query)


class InWin:
    def __init__(self, stdscr) -> None:
        height, width = stdscr.getmaxyx()
        self.input_win = curses.newwin(1, width, height - 1, 0)
        self.input_win.addstr(0, 0, "Enter text: ")
        self.history = []
        self.history_index = 0
        self.out = OutWin(stdscr)

    def refresh_query(self, query):
        self.input_win.clear()
        self.input_win.addstr(0, 0, "Enter text: " + query)
        self.input_win.refresh()

    def get_char(self):
        return self.input_win.get_wch()

    def get_history(self):
        if self.history_index == 0:
            return ""
        self.history_index += 1
        if self.history_index >= len(self.history):
            self.history_index = 0
        return self.history[self.history_index]

    def print(self, text):
        self.history.append(text)
        self.out.refresh_query(text)


def main(stdscr):
    stdscr.clear()
    curses.curs_set(0)
    inWin = InWin(stdscr)

    while True:
        query: str = ""
        inWin.refresh_query(query)
        input_char = inWin.get_char()
        while input_char != "\n":
            if input_char == '\x7f':
                query = query[:-1]
            elif input_char == curses.KEY_UP:
                query = inWin.get_history()
            else:
                query += input_char

            inWin.refresh_query(query)
            input_char = inWin.get_char()
        if query == "exit":
            curses.endwin()
            exit(0)
        if query.strip() == "":
            query = ""
            continue
        inWin.print(query)
        query = ""


if __name__ == "__main__":
    curses.wrapper(main)
